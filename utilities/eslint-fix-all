#!/usr/bin/env node

// compatible with node 4 and higher

// INSTALL
// npm install -g eslint
// copy this file as eslint-fix-all into /user/local/bin
// sudo chmod a+x /user/local/bin/eslint-fix-all
// hook the command eslint-fix-all $1 to your editor
// where $1 is the file name the editor should pass along
// every time you save, if the linter passed,
// your code will also be formatted to respect style guide

// list of fixes, *order matters*
var fixes = {
  js: [
    /*
      if (exp)
    {

      becomes

      if (exp)
      {
    */
    function (code) {
      return code.replace(/^{/mg, function ($0, $1) {
        var newLine = code.lastIndexOf('\n', $1 - 2);
        var spaces = code.slice(newLine + 1, $1 - 1).match(/^(\s*)/)[1];
        return spaces + '{';
      });
    },

    /*
      if (exp) return;

      becomes

      if (exp)
        return;
    */
    function (code) {
      return code.replace(
        /^(\s*)(else(?! if)|(?:else\s+)?if\s+\([^\n]+?\))[ ]+([a-zA-Z_$])/mg,
        '$1$2\n$1  $3'
      );
    }

  ],
  css: [
    /*
      #long-selector
      .something

      becomes

      #long-selector
        .something
    */
    function (code) {
      const comments = [];
      const lines = code.replace(/\/\*[\s\S]*?\*\//g, $0 => {
        return '\x01' + (comments.push($0) - 1) + '\x01';
      }).split('\n');
      for (let i = lines.length; i--;) {
        if (lines[i] === '{') {
          while (i > 0 && lines[--i].length) {
            let prev = lines[i - 1].trim();
            if (
              i > 0 &&
              prev.length &&
              !/[,\x01]$/.test(prev) &&
              !/^\/\//.test(prev)
            ) {
              lines[i] = '  ' + lines[i];
            }
          }
        }
      }
      return lines.join('\n').replace(/\x01(\d+)\x01/g, ($0, $1) => {
        return comments[$1];
      });
    }
  ]
};

var file = process.argv[2];
var fs = require('fs');

if (/\.js$/.test(file)) {
  require('child_process')
    .spawn('eslint', ['--fix', file])
    .on('close', function (code) {
      if (code === 0) {
        fs.writeFileSync(
          file,
          fixes.js.reduce(
            fix,
            fs.readFileSync(file).toString()
          )
        );
      }
      process.exit(code);
    });
} else if (/\.s?css$/.test(file)) {
  require('child_process')
    .spawn('stylelint', ['--fix', file])
    .on('close', function (code) {
      if (code === 0) {
        fs.writeFileSync(
          file,
          fixes.css.reduce(
            fix,
            fs.readFileSync(file).toString()
          )
        );
      }
      process.exit(code);
    });
}

function fix(content, fn) {
  return fn(content);
}
